<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on –ò–¢ –∑–∞–º–µ—Ç–∫–∏</title>
    <link>//sclif.pro/categories/code/index.xml</link>
    <description>Recent content in Code on –ò–¢ –∑–∞–º–µ—Ç–∫–∏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <atom:link href="//sclif.pro/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django –∑–∞–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª—ç—à–µ–π –≤ url</title>
      <link>//sclif.pro/post/2015-04-06-python-django-%D0%B7%D0%B0%D0%BC%D0%B5%D0%BD%D0%B0-%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D1%8F%D1%8E%D1%89%D0%B8%D1%85%D1%81%D1%8F-%D1%81%D0%BB%D1%8D%D1%88%D0%B5%D0%B9-%D0%B2-url/</link>
      <pubDate>Mon, 06 Apr 2015 17:35:12 +0000</pubDate>
      
      <guid>//sclif.pro/post/2015-04-06-python-django-%D0%B7%D0%B0%D0%BC%D0%B5%D0%BD%D0%B0-%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D1%8F%D1%8E%D1%89%D0%B8%D1%85%D1%81%D1%8F-%D1%81%D0%BB%D1%8D%D1%88%D0%B5%D0%B9-%D0%B2-url/</guid>
      <description>&lt;p&gt;–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–¥–∞–ª—è—Ç—å —Å–ª—ç—à–∏ –≤ url. –ü—Ä–∏–º–µ—Ä:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://example.com///
http://example.com/one//two//
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;–†–µ—à–µ–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ. –í ursl.py –ø–∏—à–µ–º&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url(r&#39;\/{2,}&#39;, &#39;views.redirect_to&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;–¢–µ–º —Å–∞–º—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫ &lt;strong&gt;r&amp;#8217;\/{2,}&amp;#8217;&lt;/strong&gt; —Å–ª—ç—à–µ–π –æ—Ç 2 –∏ –±–æ–ª–µ–µ. –î–∞–ª–µ–µ —Å–æ–≤–µ—Ä—à–∞–µ–º –∑–∞–º–µ–Ω—É –Ω–∞ –æ–¥–∏–Ω —Å–ª—ç—à.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import re
def redirect_to(request):
    return redirect(re.sub(r&#39;\/{2,}&#39;, &#39;/&#39;, request.path))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;P.S. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ nginx, —Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ http –∏–ª–∏ server –≤—ã—Å—Ç–∞–≤–∏—Ç–µ &lt;code&gt;merge_slashes off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;–î–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URI –ø—É—Ç—ë–º –∑–∞–º–µ–Ω—ã –¥–≤—É—Ö –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–ª—ç—à–µ–π (‚Äú/‚Äù) –Ω–∞ –æ–¥–∏–Ω.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>–†–µ—à–µ–Ω–æ: USSD –∑–∞–ø—Ä–æ—Å –≤ linux c –ø–æ–º–æ—â—å—é huawei e1550 (–ú–µ–≥–∞—Ñ–æ–Ω)</title>
      <link>//sclif.pro/post/2013-03-07-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-ussd-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81-%D0%B2-linux-c-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-huawei-e1550-%D0%BC%D0%B5%D0%B3%D0%B0%D1%84%D0%BE%D0%BD/</link>
      <pubDate>Thu, 07 Mar 2013 06:48:25 +0000</pubDate>
      
      <guid>//sclif.pro/post/2013-03-07-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-ussd-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81-%D0%B2-linux-c-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-huawei-e1550-%D0%BC%D0%B5%D0%B3%D0%B0%D1%84%D0%BE%D0%BD/</guid>
      <description>&lt;p&gt;–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å sim –º–µ–≥–∞—Ñ–æ–Ω–∞. –û–±—ã—á–Ω—ã–π ussd –∑–∞–ø—Ä–æ—Å *100# –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#/usr/bin/ussd.pl -vi \*111\*1*2#&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use Getopt::Std;
use Device::Gsm::Pdu;
use Text::Iconv;

# defaults
$opt_r = &amp;quot;/dev/ttyUSB2&amp;quot;;
$opt_s = &amp;quot;/dev/ttyUSB0&amp;quot;;
$conv = Text::Iconv-&amp;amp;gt;new(&#39;utf16be&#39;,&#39;utf8&#39;);
my $USAGE = &amp;amp;lt;&amp;amp;lt;__EOU;

Usage: $0 [-r input_port] [-s output_port] [-n] [-h] [-v] [-i] [-w] ussd_msg

Description:
  Send and receive 7-bit PDU-encoded USSD messages.
  Written and tested for Huawei E1550 GSM/UMTS USB modem.

Options:
  -r port   Port to receive data from. Default: $opt_r
  -s port   Port to send AT commands to. Default: $opt_s
  -n        Do not send any data to port. Useful with -v.
  -h        Print this help.
  -v        Be verbose.
  -i     Use iconv [from utf16be to utf8] to reply
  -w reply workaround (try it if script can not decode reply)
__EOU

sub HELP_MESSAGE {print &amp;quot;$USAGE\n&amp;quot;; exit;}
sub VERSION_MESSAGE {};
getopts (&#39;r:s:hnviw&#39;);
HELP_MESSAGE() and exit if (! $ARGV[0]) or defined($opt_h);

print &amp;quot;USSD MSG: $ARGV[0]\n&amp;quot; if $opt_v;
my $ussd_req = Device::Gsm::Pdu::encode_text7($ARGV[0]);
$ussd_req =~ s/^..//;
print &amp;quot;PDU ENCODED: $ussd_req\n&amp;quot; if $opt_v;

my $ussd_reply;
if (! $opt_n) {
    open (SENDPORT, &#39;+&amp;amp;lt;&#39;, $opt_s) or die &amp;quot;Can&#39;t open &#39;$opt_s&#39;: $!\n&amp;quot;;
    print SENDPORT &#39;AT+CUSD=1,&#39;,$ussd_req,&amp;quot;,15\r\n&amp;quot;;
    close SENDPORT;
    open (RCVPORT, $opt_r) or die &amp;quot;Can&#39;t open &#39;$opt_r&#39;: $!\n&amp;quot;;
    print &amp;quot;Waiting for USSD reply...\n&amp;quot; if $opt_v;
    while () {
        chomp;
        die &amp;quot;USSD ERROR\n&amp;quot; if $_ eq &amp;quot;+CUSD: 2&amp;quot;;
        if (/^\+CUSD: 0,\&amp;quot;([A-F0-9]+)\&amp;quot;/) {
            $ussd_reply = $1;
            print &amp;quot;PDU USSD REPLY: $ussd_reply\n&amp;quot; if $opt_v;
            last;
        }
        print &amp;quot;Got unknown USSD message: $_\n&amp;quot; if /^\+CUSD:/ and $opt_v;
    }
}

if ($ussd_reply) {
      $iconved_reply = $conv-&amp;amp;gt;convert(pack(&#39;H*&#39;, $ussd_reply));
      $decoded_ussd_reply = Device::Gsm::Pdu::decode_text7(&#39;00&#39;.$ussd_reply);
      print STDOUT &amp;quot;USSD REPLY: $decoded_ussd_reply\n&amp;quot; if not $opt_i;
      print STDOUT &amp;quot;$iconved_reply\n&amp;quot; if $opt_i;
} else {
    print &amp;quot;No USSD reply!\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>–†–µ—à–µ–Ω–æ: Net::SSH::Perl Can`t bind socket to port 1023</title>
      <link>//sclif.pro/post/2012-04-02-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-netsshperl-cant-bind-socket-to-port-1023/</link>
      <pubDate>Mon, 02 Apr 2012 16:42:37 +0000</pubDate>
      
      <guid>//sclif.pro/post/2012-04-02-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-netsshperl-cant-bind-socket-to-port-1023/</guid>
      <description>&lt;p&gt;–°–æ–±—Ä–∞–ª—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ –±–æ–ª—å—à–æ–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ ssh –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ iptables.–ù–∞–ø–∏—Å–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Net::SSH::Perl;

my $host =&amp;quot;xx.xx.xx.xx&amp;quot;;
my $user = &amp;quot;user&amp;quot;;
my $pass = &amp;quot;paswd&amp;quot;;
my $cmd = &amp;quot;uname -a&amp;quot;;
my $ssh = Net::SSH::Perl-&amp;amp;gt;new (
   $host,
   protocol =&amp;amp;gt; 2,
   port =&amp;amp;gt; 22,
   debug =&amp;amp;gt; 1,
   );
$ssh-&amp;amp;gt;login($user,$pass);
my ($stdout, $stderr, $exit) = $ssh-&amp;amp;gt;cmd($cmd);
print &amp;quot;$stdout&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;–ó–∞–ø—É—Å—Ç–∏–ª –æ–¥–∏–Ω —Ä–∞–∑ –∏ –æ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å—Ä–∞–∑—É –∂–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑.¬†–ò —Ç—É—Ç –≤—ã–ø–∞–ª–∞ –æ—à–∏–±–∫–∞ &lt;strong&gt;Net::SSH Can&amp;#8217;t bind socket to port 1023 –ê–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.¬†&lt;/strong&gt;–ü—Ä–∏ —á–µ–º –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –±—ã–ª–æ —Å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π Ubuntu Server. –ü–µ—Ä–µ—Å—Ç–∞–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–∞–∫–µ—Ç Net::SSH:Perl –∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ. –ü–æ—á–∏—Ç–∞–≤ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —è –ø–æ–Ω—è–ª –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞.¬†SSH –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç root –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ 1023. –ò –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç socket. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –µ—Å–ª–∏ –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã –±–æ–ª—å—à–µ 1024. –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –¥–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –≤ —Ñ–∞–π–ª–∞—Ö .ssh/ssh_config –∏ /etc/ssh/ssh_config –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º &lt;strong&gt;UsePrivilegedPort no&lt;/strong&gt;, –Ω–æ –ø–æ—á–µ–º—É Net::SSH:Perl —Ñ–∞–π–ª ssh_config –∏—Å–∫–∞–ª –≤ /etc. –ü—Ä–∏—à–ª–æ—Å—å –ø—Ä–æ—Å—Ç–æ –µ—â–µ —Ä–∞–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ —Ç—É–¥–∞. –ò –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ üôÇ&lt;/p&gt;

&lt;p&gt;–ê –≤–æ—Ç –∏ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π iptables. –ó–∞–ø—É—Å–∫–∞–µ–º ./script iptables -A INPUT -s 0/0 -j ACCEPT. –ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ, —Ç–æ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–∫–∞ iptables –Ω–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;
use Net::SSH::Perl;

my $host = &#39;xx.xx.xx.xx&#39;;
my $pass = &#39;xxx&#39;;
my $user = &#39;user&#39;;
my $x;
my $command;
my ($stdout, $stderr, $exit);

while(@ARGV)
                { $x = shift @ARGV;
                  $command .= &amp;quot; $x&amp;quot;;
                }

my $ssh = Net::SSH::Perl-&amp;amp;gt;new($host, protocol =&amp;amp;gt; &#39;2&#39;);
$ssh-&amp;amp;gt;login($user, $pass);

if ($command=~m/\-D/) {

        do
                {
                ($stdout, $stderr, $exit) = $ssh-&amp;amp;gt;cmd($command);
                } while(!$stderr);

        }
        else
        {
        $ssh-&amp;amp;gt;cmd($command);
        }

$ssh-&amp;amp;gt;cmd(&amp;quot;exit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>