<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on ИТ заметки</title>
    <link>//sclif.pro/tags/linux/index.xml</link>
    <description>Recent content in Linux on ИТ заметки</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <atom:link href="//sclif.pro/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Asterisk WebRTC</title>
      <link>//sclif.pro/post/2015-09-13-docker-asterisk-webrtc/</link>
      <pubDate>Sun, 13 Sep 2015 08:41:19 +0000</pubDate>
      
      <guid>//sclif.pro/post/2015-09-13-docker-asterisk-webrtc/</guid>
      <description>&lt;p&gt;После нескольких часов экспериментов я создал docker &lt;a href=&#34;https://github.com/sclif13/docker-asterisk13-webrtc&#34;&gt;image&lt;/a&gt; на основе Centos 6 и Asterisk 13.5.0. Вышел он довольно увесистый в 1.3 Гб. Собран с поддержкой WebRTC.&lt;/p&gt;

&lt;p&gt;Как пользоваться?&lt;/p&gt;

&lt;p&gt;Качаем готовый image c &lt;a href=&#34;https://hub.docker.com/r/sclif13/docker-asterisk13-webrtc/&#34; target=&#34;_blank&#34;&gt;hub.docker.com&lt;/a&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull sclif13/docker-asterisk13-webrtc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем необходимо создать docker контейнер:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -t --name=asterisk -p 5060:5060/udp \
       -p 10000-10200:10000-10200/udp \
       -p 8088:8088 \
       -v /data/asterisk/etc:/etc/asterisk \
       sclif13/docker-asterisk13-webrtc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Указываем порты 5060 для SIP, 10000-10200 для RTP, 8088  для webrtc. Так же если необходимо вынести конфиги наружу указываем папку где они будут лежать в вашей системе(/data/asterisk/etc) и в самом docker контейнере (/etc/asterisk)&lt;/p&gt;

&lt;p&gt;После того как будет создан и запущен ваш docker контейнер нужно его сконфигурировать и для начала скопировать стандартные конфиги.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec  -it asterisk bash
cd /usr/src/asterisk-*
make samples
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь в вашей папке(/data/asterisk/etc) должны появиться конфиги. Далее гуглим как настроить этот самый WebRTC для Asterisk. Чтобы попасть в консоль самого Asterisk выполняем следующую команду:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec  -it asterisk asterisk -rvvvvvvvvvvvvvvvvvvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;P.S. Обновил asterisk до 13.14.0&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/sclif13/docker-asterisk13-webrtc&#34; data-size=&#34;large&#34; aria-label=&#34;Star sclif13/docker-asterisk13-webrtc on GitHub&#34;&gt;Star&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireshark в docker</title>
      <link>//sclif.pro/post/2015-03-12-wireshark-%D0%B2-docker/</link>
      <pubDate>Thu, 12 Mar 2015 18:12:31 +0000</pubDate>
      
      <guid>//sclif.pro/post/2015-03-12-wireshark-%D0%B2-docker/</guid>
      <description>&lt;p&gt;Не давно столкнулся с проблемой установки wireshark 1.12 из исходников на ubuntu desktop 14.04, а точнее был конфликт между библиотеками Xserver. Так как я по большой части использую wireshark для наглядного разбора, а статистику собираю через tcpdump, то решил создать wireshark в docker.&lt;/p&gt;

&lt;p&gt;Dockerfile &lt;a href=&#34;https://github.com/sclif13/docker-wireshark&#34;&gt;https://github.com/sclif13/docker-wireshark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Статья в помощь по запуску &lt;a href=&#34;http://habrahabr.ru/post/240509/&#34;&gt;http://habrahabr.ru/post/240509/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Вывод времени на английском на perl.</title>
      <link>//sclif.pro/post/2013-06-24-%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8-%D0%BD%D0%B0-%D0%B0%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%BC-%D0%BD%D0%B0-perl/</link>
      <pubDate>Mon, 24 Jun 2013 06:52:40 +0000</pubDate>
      
      <guid>//sclif.pro/post/2013-06-24-%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8-%D0%BD%D0%B0-%D0%B0%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%BC-%D0%BD%D0%B0-perl/</guid>
      <description>&lt;p&gt;Появилась задача вывести время на английском в русской локали ru_RU.UTF-8.&lt;/p&gt;

&lt;p&gt;Date: Mon, 24 Jun 2013 12:39:08 +0600&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
use POSIX;
setlocale(LC_TIME,&amp;quot;C&amp;quot;);
print &amp;quot;Date: &amp;quot; . strftime(&amp;quot;%a, %d %b %Y %H:%M:%S %z&amp;quot;, localtime) . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Решено: USSD запрос в linux c помощью huawei e1550 (Мегафон)</title>
      <link>//sclif.pro/post/2013-03-07-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-ussd-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81-%D0%B2-linux-c-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-huawei-e1550-%D0%BC%D0%B5%D0%B3%D0%B0%D1%84%D0%BE%D0%BD/</link>
      <pubDate>Thu, 07 Mar 2013 06:48:25 +0000</pubDate>
      
      <guid>//sclif.pro/post/2013-03-07-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-ussd-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81-%D0%B2-linux-c-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-huawei-e1550-%D0%BC%D0%B5%D0%B3%D0%B0%D1%84%D0%BE%D0%BD/</guid>
      <description>&lt;p&gt;Появилась необходимость контролировать баланс sim мегафона. Обычный ussd запрос *100# по каким-то причинам не захотел работать.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#/usr/bin/ussd.pl -vi \*111\*1*2#&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use Getopt::Std;
use Device::Gsm::Pdu;
use Text::Iconv;

# defaults
$opt_r = &amp;quot;/dev/ttyUSB2&amp;quot;;
$opt_s = &amp;quot;/dev/ttyUSB0&amp;quot;;
$conv = Text::Iconv-&amp;amp;gt;new(&#39;utf16be&#39;,&#39;utf8&#39;);
my $USAGE = &amp;amp;lt;&amp;amp;lt;__EOU;

Usage: $0 [-r input_port] [-s output_port] [-n] [-h] [-v] [-i] [-w] ussd_msg

Description:
  Send and receive 7-bit PDU-encoded USSD messages.
  Written and tested for Huawei E1550 GSM/UMTS USB modem.

Options:
  -r port   Port to receive data from. Default: $opt_r
  -s port   Port to send AT commands to. Default: $opt_s
  -n        Do not send any data to port. Useful with -v.
  -h        Print this help.
  -v        Be verbose.
  -i     Use iconv [from utf16be to utf8] to reply
  -w reply workaround (try it if script can not decode reply)
__EOU

sub HELP_MESSAGE {print &amp;quot;$USAGE\n&amp;quot;; exit;}
sub VERSION_MESSAGE {};
getopts (&#39;r:s:hnviw&#39;);
HELP_MESSAGE() and exit if (! $ARGV[0]) or defined($opt_h);

print &amp;quot;USSD MSG: $ARGV[0]\n&amp;quot; if $opt_v;
my $ussd_req = Device::Gsm::Pdu::encode_text7($ARGV[0]);
$ussd_req =~ s/^..//;
print &amp;quot;PDU ENCODED: $ussd_req\n&amp;quot; if $opt_v;

my $ussd_reply;
if (! $opt_n) {
    open (SENDPORT, &#39;+&amp;amp;lt;&#39;, $opt_s) or die &amp;quot;Can&#39;t open &#39;$opt_s&#39;: $!\n&amp;quot;;
    print SENDPORT &#39;AT+CUSD=1,&#39;,$ussd_req,&amp;quot;,15\r\n&amp;quot;;
    close SENDPORT;
    open (RCVPORT, $opt_r) or die &amp;quot;Can&#39;t open &#39;$opt_r&#39;: $!\n&amp;quot;;
    print &amp;quot;Waiting for USSD reply...\n&amp;quot; if $opt_v;
    while () {
        chomp;
        die &amp;quot;USSD ERROR\n&amp;quot; if $_ eq &amp;quot;+CUSD: 2&amp;quot;;
        if (/^\+CUSD: 0,\&amp;quot;([A-F0-9]+)\&amp;quot;/) {
            $ussd_reply = $1;
            print &amp;quot;PDU USSD REPLY: $ussd_reply\n&amp;quot; if $opt_v;
            last;
        }
        print &amp;quot;Got unknown USSD message: $_\n&amp;quot; if /^\+CUSD:/ and $opt_v;
    }
}

if ($ussd_reply) {
      $iconved_reply = $conv-&amp;amp;gt;convert(pack(&#39;H*&#39;, $ussd_reply));
      $decoded_ussd_reply = Device::Gsm::Pdu::decode_text7(&#39;00&#39;.$ussd_reply);
      print STDOUT &amp;quot;USSD REPLY: $decoded_ussd_reply\n&amp;quot; if not $opt_i;
      print STDOUT &amp;quot;$iconved_reply\n&amp;quot; if $opt_i;
} else {
    print &amp;quot;No USSD reply!\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Решено: Net::SSH::Perl Can`t bind socket to port 1023</title>
      <link>//sclif.pro/post/2012-04-02-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-netsshperl-cant-bind-socket-to-port-1023/</link>
      <pubDate>Mon, 02 Apr 2012 16:42:37 +0000</pubDate>
      
      <guid>//sclif.pro/post/2012-04-02-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%BE-netsshperl-cant-bind-socket-to-port-1023/</guid>
      <description>&lt;p&gt;Собрался написать не большой скрипт, который на удаленном сервере через ssh добавляет или удаляет правила iptables.Написал тестовый скрипт.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Net::SSH::Perl;

my $host =&amp;quot;xx.xx.xx.xx&amp;quot;;
my $user = &amp;quot;user&amp;quot;;
my $pass = &amp;quot;paswd&amp;quot;;
my $cmd = &amp;quot;uname -a&amp;quot;;
my $ssh = Net::SSH::Perl-&amp;amp;gt;new (
   $host,
   protocol =&amp;amp;gt; 2,
   port =&amp;amp;gt; 22,
   debug =&amp;amp;gt; 1,
   );
$ssh-&amp;amp;gt;login($user,$pass);
my ($stdout, $stderr, $exit) = $ssh-&amp;amp;gt;cmd($cmd);
print &amp;quot;$stdout&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запустил один раз и он отработал нормально и сразу же второй раз. И тут выпала ошибка &lt;strong&gt;Net::SSH Can&amp;#8217;t bind socket to port 1023 Адрес уже используется. &lt;/strong&gt;При чем на другом сервере такой проблемы не было с идентичной Ubuntu Server. Переставил несколько раз пакет Net::SSH:Perl и не помогло. Почитав в Интернете я понял в чем проблема. SSH клиент если запускать от root открывает привилегированный порт в моем случае 1023. И не закрывает socket. Соответственно, если надо открыть еще одно соединение, то нужно использовать порты больше 1024. Отключается данная опция в файлах .ssh/ssh_config и /etc/ssh/ssh_config параметром &lt;strong&gt;UsePrivilegedPort no&lt;/strong&gt;, но почему Net::SSH:Perl файл ssh_config искал в /etc. Пришлось просто еще раз скопировать и туда. И все заработало 🙂&lt;/p&gt;

&lt;p&gt;А вот и скрипт управляемый iptables. Запускаем ./script iptables -A INPUT -s 0/0 -j ACCEPT. Когда происходит удаление, то скрипт удаляет все одинаковые правила, пока iptables не выдаст ошибку.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;
use Net::SSH::Perl;

my $host = &#39;xx.xx.xx.xx&#39;;
my $pass = &#39;xxx&#39;;
my $user = &#39;user&#39;;
my $x;
my $command;
my ($stdout, $stderr, $exit);

while(@ARGV)
                { $x = shift @ARGV;
                  $command .= &amp;quot; $x&amp;quot;;
                }

my $ssh = Net::SSH::Perl-&amp;amp;gt;new($host, protocol =&amp;amp;gt; &#39;2&#39;);
$ssh-&amp;amp;gt;login($user, $pass);

if ($command=~m/\-D/) {

        do
                {
                ($stdout, $stderr, $exit) = $ssh-&amp;amp;gt;cmd($command);
                } while(!$stderr);

        }
        else
        {
        $ssh-&amp;amp;gt;cmd($command);
        }

$ssh-&amp;amp;gt;cmd(&amp;quot;exit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>